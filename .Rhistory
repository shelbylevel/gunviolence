#ggtitle("homicide Deaths by State, 2022") +
#Creates breaks in graph & controls limits(min/max)
#scale_y_continuous(limits = c(-0.2, 0.7), breaks = c(-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7)) +
#Flips graph from vertical bars to horizontal
coord_flip() +
labs(caption = "",
y="Rate per 100,000 population",    		#Legend titles
x="") +
#Create fill gradient in bars
scale_fill_gradient(name="Label",
low = "#BFCEDB",
high = "#003A70") +
#Create average line
geom_hline(yintercept = mean(homicide$Rate), color="grey40", linewidth=1, alpha=.5) +
annotate('text', x=5, y=5.8, color='grey40', fontface='bold', label="National Average", family='Georgia') +
#Control rate numbers on graph
geom_text(aes(label=round(Rate,1)), color='black', size=3, family='Georgia', fontface="bold", hjust=1.2, vjust=.35) +
#Control graph theme
theme_minimal() +
theme(text = element_text(family = 'Georgia')) +
theme(plot.title=element_text(size = 38, color = '#004023', hjust = 0, face='bold')) +
theme(axis.text.x = element_text(color="gray20",
size=10),
axis.text.y = element_text(color="black",
size=10)) +
theme(legend.position = 'none')
#census_api_key("e91d231563691e6bea782a7dbafe82616924d422", overwrite = TRUE, install = TRUE)
#census_api_key('e91d231563691e6bea782a7dbafe82616924d422')
state <- get_acs(
geography = "state",
variables = "B01001_001",
year = 2019,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
shift_geometry()
county <- get_acs(
geography = "county",
variables = c("B01001_001"),
year = 2019,
geometry = TRUE,
resolution ="20m",
) %>%
shift_geometry()
state %>% mutate(GEOID=as.integer(GEOID)) -> state
state %>% filter(NAME!="Puerto Rico") -> state
county %>% mutate(GEOID=as.integer(GEOID)) -> county
View(county)
View(state)
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
#county %>% filter()
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
View(county)
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
#county %>% filter()
left_join(homicide,county, by='GEOID') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
#county %>% filter()
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
View(homicide)
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% filter(County != NA) -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
View(homicide)
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% filter(County != 'NA') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
#census_api_key("e91d231563691e6bea782a7dbafe82616924d422", overwrite = TRUE, install = TRUE)
#census_api_key('e91d231563691e6bea782a7dbafe82616924d422')
state <- get_acs(
geography = "state",
variables = "B01001_001",
year = 2019,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
shift_geometry()
county <- get_acs(
geography = "county",
variables = c("B01001_001"),
year = 2019,
geometry = TRUE,
resolution ="20m",
)
state %>% mutate(GEOID=as.integer(GEOID)) -> state
state %>% filter(NAME!="Puerto Rico") -> state
county %>% mutate(GEOID=as.integer(GEOID)) -> county
county %>% filter(NAME!="Puerto Rico") -> county
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% filter(County != 'NA') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
#census_api_key("e91d231563691e6bea782a7dbafe82616924d422", overwrite = TRUE, install = TRUE)
#census_api_key('e91d231563691e6bea782a7dbafe82616924d422')
state <- get_acs(
geography = "state",
variables = "B01001_001",
year = 2019,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
shift_geometry()
county <- get_acs(
geography = "county",
variables = c("B01001_001"),
year = 2019,
geometry = TRUE,
)
state %>% mutate(GEOID=as.integer(GEOID)) -> state
state %>% filter(NAME!="Puerto Rico") -> state
county %>% mutate(GEOID=as.integer(GEOID)) -> county
county %>% filter(NAME!="Puerto Rico") -> county
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% filter(County != 'NA') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
read.delim(
here::here(
"data",
"US.AllFirearmHomicide.Year.1999-2020.txt"
)
) -> homicide
read.delim(
here::here(
"data",
"US.AllFirearmHomicide.Year.2021-22.txt"
)
) -> homicide2
#Combine datasets
rbind(homicide,homicide2) -> homicide
homicide = subset(homicide,select=-c(Notes))
#Create calculated crude rate variable
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Create plot
ggplot(homicide, aes(x=Year.Code,y=Rate)) +
#ggtitle("U.S. Firearm Homicide Deaths by Year \n 1999 - 2022") +
#Show trend line (smoothed data)
geom_smooth(color="#004023",span=0.75,
se=TRUE, size=1,fill="gray85") +
geom_col(fill="#003a70",alpha=.80) +
geom_text(aes(label= round(Rate, 1)), size=3.3, color ="black", family='Georgia', fontface='bold', vjust=1.75) +
labs(caption='', y="Rate per 100,000 Population", x=NULL, size=15) +
scale_y_continuous(labels = comma) +
#  limits = c(MIN, MAX).
scale_x_continuous(limits = c(1998, 2023),
breaks = c(1999,2001,2003,2005,2007,2009,2011,2013,2015,2017,2019,2021)) +
#One theme (title left, only vertical background lines)
#theme_minimal()+theme(axis.title.y=element_text(size=10,colour="gray40")) +
#theme(axis.title.x=element_text(size=10,colour="gray40")) +
#theme(axis.ticks.x = element_line(size = .03), panel.grid.minor = element_blank(),
#     panel.grid.major.y = element_line( size=.15, color="gray10", linetype = 'dotdash'),
#   panel.grid.major.x = element_blank(),
#axis.ticks.length=unit(1,"cm")) +
#theme(legend.position = 'none')
theme_minimal() +
theme(text = element_text(family = 'Georgia')) +
theme(plot.title=element_text(size = 30, color = '#003A70', hjust = 0, face='bold')) +
theme(axis.text.x = element_text(color="black", size=11, vjust=8),
axis.text.y = element_text(color="black", size=11, hjust=2)) +
theme(panel.grid.major.y = element_line( size=.3, color="gray40", linetype = 'solid'),
panel.grid.minor.y = element_line( size=.3, color="gray80", linetype = 'solid'),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(legend.position = 'none')
read.delim(
here::here(
"data",
"OH.AllFirearmHomicide.County.1999-2020.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Deaths=as.integer(Deaths)) -> homicide
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=County.Code) -> homicide
left_join(county,homicide, by='GEOID') -> homicide
homicide %>% filter(County != 'NA') -> homicide
homicide %>% mutate(Name=str_sub(County,1,-12)) -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('0.5 - 1.1','1.2 - 2.2','2.3 - 9.1') -> legend.labels
#Create map
ggplot() +
#ggtitle("Ohio Firearm Homicide Deaths by County, 1999-2020") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
geom_sf_text(data=homicide,aes(label= Name), size = 2.5, vjust=-.25, family="Georgia",
color = case_when(homicide$Breaks == '[0.467,1.07]' | homicide$Breaks == '(1.07,2.22]' | homicide$Rate == '' ~ 'black',
homicide$Breaks == '(2.22,9.13]' ~ 'white')) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 38, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
View(homicide)
read.delim(
here::here(
"data",
"US.AllFirearmHomicide.State.2022.txt"
)
) -> homicide
#Create calculated crude rate variable
homicide %>% mutate(Rate=(Deaths/Population)*100000) -> homicide
#Clean up data
homicide %>% filter(Notes=='') -> homicide
homicide = subset(homicide,select=-c(Notes))
homicide %>% rename(GEOID=Residence.State.Code) -> homicide
left_join(state,homicide, by='GEOID') -> homicide
#Create data breaks
breaks_j <- classIntervals(c(min(homicide$Rate),
homicide$Rate),n=3,
style="quantile")
homicide <- mutate(homicide,Breaks=cut(Rate,breaks_j$brks,include.lowest=TRUE))
#Change legend category labels based on breaks
c('1.2 - 3.2','3.3 - 6.3','6.4 - 21') -> legend.labels
#Create map
ggplot() +
#ggtitle("Firearm Homicide Deaths by State, 2022") +
geom_sf(data = homicide, aes(fill = Breaks), color = "black",size=.4, alpha=1) +
scale_fill_manual(values=c("#BFCEDB",
"#6084A6",
"#003A70"), na.value = "white", drop = FALSE, name="Rate per 100,000 population", label=legend.labels) +
#geom_sf_text(data=state,aes(label= Code), color = "black", size = 2.5, vjust = -.5) +
#geom_sf_text(data=State,aes(label= round(Rate,2)), color = "black", size = 2.5, vjust = 1.2) +
theme_void() +
theme(text = element_text(family = 'Georgia'),
plot.title = element_text(size = 20, color = '#004023', hjust = .5, face='bold'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
theme(legend.position = 'bottom')
